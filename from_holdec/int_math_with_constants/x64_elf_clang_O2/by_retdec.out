Running phase: Unpacking ( some time )
No matching plugins found for 'LLVM 3.9.1'
No matching plugins found for 'GCC 6.4.1'
No matching plugins found for 'GCC 4.6.3'
Running phase: Initialization ( some time )
Running phase: Providers initialization ( some time )
Running phase: Input binary to LLVM IR decoding ( some time )
Running phase: LLVM ( some time )
Running phase: x86 address spaces optimization ( some time )
Running phase: x87 fpu register analysis ( some time )
Running phase: Main function identification optimization ( some time )
Running phase: Libgcc idioms optimization ( some time )
Running phase: LLVM instruction optimization ( some time )
Running phase: Conditional branch optimization ( some time )
Running phase: Syscalls optimization ( some time )
Running phase: Stack optimization ( some time )
Running phase: Constants optimization ( some time )
Running phase: Function parameters and returns optimization ( some time )
Running phase: LLVM instruction optimization using RDA ( some time )
Running phase: LLVM instruction optimization ( some time )
Running phase: Simple types recovery optimization ( some time )
Running phase: Disassembly generation ( some time )
Running phase: Assembly mapping instruction removal ( some time )
Running phase: C++ class hierarchy optimization ( some time )
Running phase: Selected functions optimization ( some time )
Running phase: Unreachable functions optimization ( some time )
Running phase: LLVM instruction optimization ( some time )
Running phase: Make all registers local ( some time )
Running phase: Value protection optimization ( some time )
Running phase: LLVM ( some time )
Running phase: LLVM instruction optimization ( some time )
Running phase: Simple types recovery optimization ( some time )
Running phase: Stack pointer operations optimization ( some time )
Running phase: Instruction idioms optimization ( some time )
Running phase: LLVM ( some time )
Running phase: LLVM instruction optimization ( some time )
Running phase: Instruction idioms optimization ( some time )
Running phase: Phi removal ( some time )
Running phase: LLVM ( some time )
Running phase: Value protection optimization ( some time )
Running phase: Generate the current LLVM IR ( some time )
Running phase: Generate the current bitcode ( some time )
Running phase: LLVM IR -> HLL ( some time )
Running phase: initialization ( some time )
 -> loading the input config ( some time )
 -> creating the used HLL writer [c] ( some time )
 -> creating the used alias analysis [simple] ( some time )
 -> creating the used call info obtainer [optim] ( some time )
 -> creating the used evaluator of arithmetical expressions [c] ( some time )
 -> creating the used variable names generator [fruit] ( some time )
 -> creating the used variable renamer [readable] ( some time )
 -> creating the used semantics [libc,gcc-general,win-api] ( some time )
Running phase: conversion of LLVM IR into BIR ( some time )
 -> converting global variables ( some time )
 -> converting function signed_char_add ( some time )
 -> converting function signed_char_mult ( some time )
 -> converting function signed_char_div ( some time )
 -> converting function signed_char_modulo ( some time )
 -> converting function unsigned_char_add ( some time )
 -> converting function unsigned_char_mult ( some time )
 -> converting function unsigned_char_div ( some time )
 -> converting function unsigned_char_modulo ( some time )
 -> converting function signed_short_add ( some time )
 -> converting function signed_short_mult ( some time )
 -> converting function signed_short_div ( some time )
 -> converting function signed_short_modulo ( some time )
 -> converting function unsigned_short_add ( some time )
 -> converting function unsigned_short_mult ( some time )
 -> converting function unsigned_short_div ( some time )
 -> converting function unsigned_short_modulo ( some time )
 -> converting function signed_int_add ( some time )
 -> converting function signed_int_mult ( some time )
 -> converting function signed_int_div ( some time )
 -> converting function signed_int_modulo ( some time )
 -> converting function unsigned_int_add ( some time )
 -> converting function unsigned_int_mult ( some time )
 -> converting function unsigned_int_div ( some time )
 -> converting function unsigned_int_modulo ( some time )
 -> converting function signed_long_int_add ( some time )
 -> converting function signed_long_int_mult ( some time )
 -> converting function signed_long_int_div ( some time )
 -> converting function signed_long_int_modulo ( some time )
 -> converting function unsigned_long_int_add ( some time )
 -> converting function unsigned_long_int_mult ( some time )
 -> converting function unsigned_long_int_div ( some time )
 -> converting function unsigned_long_int_modulo ( some time )
 -> converting function signed_long_long_add ( some time )
 -> converting function signed_long_long_mult ( some time )
 -> converting function signed_long_long_div ( some time )
 -> converting function signed_long_long_modulo ( some time )
 -> converting function unsigned_long_long_add ( some time )
 -> converting function unsigned_long_long_mult ( some time )
 -> converting function unsigned_long_long_div ( some time )
 -> converting function unsigned_long_long_modulo ( some time )
 -> converting function main ( some time )
Running phase: removing functions from standard libraries ( some time )
Running phase: removing code that is not reachable in a CFG ( some time )
Running phase: signed/unsigned types fixing ( some time )
Running phase: converting LLVM intrinsic functions to standard functions ( some time )
Running phase: obtaining debug information ( some time )
Running phase: alias analysis [simple] ( some time )
Running phase: optimizations [normal] ( some time )
 -> running GotoStmtOptimizer ( some time )
 -> running RemoveUselessCastsOptimizer ( some time )
 -> running UnusedGlobalVarOptimizer ( some time )
 -> running DeadLocalAssignOptimizer ( some time )
 -> running SimpleCopyPropagationOptimizer ( some time )
 -> running CopyPropagationOptimizer ( some time )
RETDECDIR/bin/retdec-decompiler[0xf3d44a]
RETDECDIR/bin/retdec-decompiler[0xf3b4f4]
RETDECDIR/bin/retdec-decompiler[0xf3b655]
/lib64/libpthread.so.0(+0x12e70)[0x7f331d568e70]
RETDECDIR/bin/retdec-decompiler[0x77ad70]
RETDECDIR/bin/retdec-decompiler[0x758df6]
RETDECDIR/bin/retdec-decompiler[0x759203]
RETDECDIR/bin/retdec-decompiler[0x759a90]
RETDECDIR/bin/retdec-decompiler[0x759f8e]
RETDECDIR/bin/retdec-decompiler[0x75e268]
RETDECDIR/bin/retdec-decompiler[0x944da0]
RETDECDIR/bin/retdec-decompiler[0x926a7d]
RETDECDIR/bin/retdec-decompiler[0x93c914]
RETDECDIR/bin/retdec-decompiler[0x926da9]
RETDECDIR/bin/retdec-decompiler[0x9270b8]
RETDECDIR/bin/retdec-decompiler[0x9296db]
RETDECDIR/bin/retdec-decompiler[0x927775]
RETDECDIR/bin/retdec-decompiler[0xaf048c]
RETDECDIR/bin/retdec-decompiler[0xaf2601]
RETDECDIR/bin/retdec-decompiler[0x16e7ec4]
RETDECDIR/bin/retdec-decompiler[0x688e7f]
RETDECDIR/bin/retdec-decompiler[0x621771]
RETDECDIR/bin/retdec-decompiler[0x54a644]
/lib64/libc.so.6(__libc_start_main+0xf3)[0x7f331d05b413]
RETDECDIR/bin/retdec-decompiler[0x62056e]
Stack dump:
0.	Program arguments: RETDECDIR/bin/retdec-decompiler --cleanup --no-memory-limit -o from_holdec/int_math_with_constants/x64_elf_clang_O2/retdec_subject.c from_holdec/int_math_with_constants/x64_elf_clang_O2/subject.exe 
1.	Running pass 'LLVM IR -> HLL' on module ''.
