// Decompiled by holdec

// address: 00000fc0.0
// full-signature: func(main, return=[<int(undef, 8),null,unknown>], parameter=[<int(undef, 4),argc,unknown>, <ptr(ptr(int(undef, 1))),argv,unknown>], varargs=false)
d8 main(d4 argc, d1** argv)
{
  reg_var9 = UNDEF;
  reg_var10 = UNDEF;
  reg_var14 = UNDEF;
  reg_var18 = UNDEF;
  reg_var19 = UNDEF;
  reg_var7 = LOAD(stdin);
  (void) setlocale(6, "");
  (void) bindtextdomain("util-linux", "/usr/share/locale");
  (void) textdomain("util-linux");
  (void) F_00001740();
  (void) signal(2, &g_0x00001570);
  (void) signal(15, &g_0x00001570);
  reg_var2 = 0;
  reg_ac = getopt_long(argc, argv, "Vh", &g_0x0001fc28, 0);
  if(reg_ac == -1) goto L4;
  goto L397;

// calls     [6, 53]
// called    [0]
// deep-calls     {6, 9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 62, 63, 65, 67, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 324, 325, 326, 328, 329, 336, 337, 338, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 372, 384, 393, 400, 412, 424, 430, 436, 437, 438, 439, 440, 448, 449, 450, 451, 452, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 490, 491, 492, 493, 494, 495, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// deep-called    {0, 61}
// startStackOffset -128
// modifiedAddresses  [ALL]
L4:
  reg_ae = SIGNED_EXTEND(LOAD(g_0x0001ffb8));
  reg_af = malloc(0x8000);
  reg_var5 = argv + reg_ae * 8;
  if(reg_af != 0) goto L6;
  goto L53;

// calls     [9, 344]
// called    [4]
// deep-calls     {9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 62, 63, 65, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 324, 325, 326, 328, 329, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 372, 393, 400, 412, 430, 436, 437, 438, 439, 440, 448, 449, 450, 451, 452, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 490, 491, 492, 493, 494, 495, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// deep-called    {0, 4, 61}
// startStackOffset -128
// modifiedAddresses  [ADDR(g_0x00020010)]
L6:
  reg_var3 = LOAD(argv + reg_ae * 8);
  reg_var6 = 0;
  reg_var8 = &g_0x00001788;
  reg_var1 = 0x2000;
  reg_var4 = 0x2000;
  (void) STORE(&buffer_addr, reg_af);
  if(reg_var3 != 0) goto L9;
  goto L344;

// calls     [11, 47]
// called    [6, 40]
// deep-calls     {9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 62, 63, 65, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 324, 325, 326, 328, 329, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 372, 393, 400, 412, 430, 436, 437, 438, 439, 440, 448, 449, 450, 451, 452, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 490, 491, 492, 493, 494, 495, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// deep-called    {0, 4, 6, 9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 43, 44, 45, 46, 47, 61, 62, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 393, 400, 430, 436, 437, 438, 439, 440, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// startStackOffset -128
// modifiedAddresses  [ALL]
L9:
  reg_as = fopen64(reg_var3, "r");
  reg_var7 = reg_as;
  if(reg_as != 0) goto L11;
  goto L47;

// calls     [344]
// called    [9]
// deep-calls     {9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 62, 63, 65, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 324, 325, 326, 328, 329, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 372, 393, 400, 412, 430, 436, 437, 438, 439, 440, 448, 449, 450, 451, 452, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 490, 491, 492, 493, 494, 495, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// deep-called    {0, 4, 6, 9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 43, 44, 45, 46, 47, 61, 62, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 393, 400, 430, 436, 437, 438, 439, 440, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// startStackOffset -128
// modifiedAddresses  []
L11:
  reg_var8 = LOAD(reg_var5);
  reg_var5 += 8;
  goto L344;

// calls     [43, 350]
// called    [305]
// deep-calls     {9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 62, 63, 65, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 324, 325, 326, 328, 329, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 372, 393, 400, 412, 430, 436, 437, 438, 439, 440, 448, 449, 450, 451, 452, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 490, 491, 492, 493, 494, 495, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// deep-called    {0, 4, 6, 9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 43, 44, 45, 46, 47, 61, 62, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 393, 400, 430, 436, 437, 438, 439, 440, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// startStackOffset -128
// modifiedAddresses  []
L18:
  reg_var12 = UNSIGNED_EXTEND(reg_var9) * 4;
  reg_var11 = reg_var12 + -4;
  if(LOAD(reg_var10 + reg_var11) == 10) goto L43;
  goto L350;

// calls     [9, 42]
// called    [39, 47]
// deep-calls     {9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 62, 63, 65, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 324, 325, 326, 328, 329, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 372, 393, 400, 412, 430, 436, 437, 438, 439, 440, 448, 449, 450, 451, 452, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 490, 491, 492, 493, 494, 495, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// deep-called    {0, 4, 6, 9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 43, 44, 45, 46, 47, 61, 62, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 393, 400, 430, 436, 437, 438, 439, 440, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// startStackOffset -128
// modifiedAddresses  []
L40:
  reg_var3 = LOAD(reg_var5);
  if(reg_var3 == 0) goto L42;
  goto L9;

// calls     [63]
// called    [40]
// deep-calls     {63}
// deep-called    {0, 4, 6, 9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 43, 44, 45, 46, 47, 61, 62, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 393, 400, 430, 436, 437, 438, 439, 440, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// startStackOffset -128
// modifiedAddresses  [ALL]
L42:
  (void) free(buffer_addr);
  reg_result = UNSIGNED_EXTEND(reg_var6);
  goto L63;

// calls     [44]
// called    [18]
// deep-calls     {9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 62, 63, 65, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 324, 325, 326, 328, 329, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 372, 393, 400, 412, 430, 436, 437, 438, 439, 440, 448, 449, 450, 451, 452, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 490, 491, 492, 493, 494, 495, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// deep-called    {0, 4, 6, 9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 43, 44, 45, 46, 47, 61, 62, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 393, 400, 430, 436, 437, 438, 439, 440, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// startStackOffset -128
// modifiedAddresses  []
L43:
  reg_var17 = reg_var1;
  goto L44;

// calls     [31]
// called    [43, 311, 477]
// deep-calls     {9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 62, 63, 65, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 324, 325, 326, 328, 329, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 372, 393, 400, 412, 430, 436, 437, 438, 439, 440, 448, 449, 450, 451, 452, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 490, 491, 492, 493, 494, 495, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// deep-called    {0, 4, 6, 9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 43, 44, 45, 46, 47, 61, 62, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 393, 400, 430, 436, 437, 438, 439, 440, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// startStackOffset -128
// modifiedAddresses  [ADD(LOAD(ADDR(g_0x00020010)), reg_pp_222)]
L44:
  reg_var13--;
  reg_var1 = reg_var17;
  reg_var4 = NARROW(reg_var1);
  (void) STORE(reg_var12 + buffer_addr, 0);
  goto L31;

// calls     [40]
// called    [9]
// deep-calls     {9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 62, 63, 65, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 324, 325, 326, 328, 329, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 372, 393, 400, 412, 430, 436, 437, 438, 439, 440, 448, 449, 450, 451, 452, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 490, 491, 492, 493, 494, 495, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// deep-called    {0, 4, 6, 9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 43, 44, 45, 46, 47, 61, 62, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 393, 400, 430, 436, 437, 438, 439, 440, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// startStackOffset -128
// modifiedAddresses  [ALL]
L47:
  reg_dv = dcgettext(reg_as, "cannot open %s", 5);
  reg_var5 += 8;
  reg_var6 = 1;
  (void) warn(reg_dv, LOAD(reg_var5 + -8), 1, &g_0x0001fc28, reg_var2, InitValue(initial_value_of_x5));
  goto L40;

// calls     [44]
// called    [30]
// deep-calls     {9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 62, 63, 65, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 324, 325, 326, 328, 329, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 372, 393, 400, 412, 430, 436, 437, 438, 439, 440, 448, 449, 450, 451, 452, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 490, 491, 492, 493, 494, 495, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// deep-called    {0, 4, 6, 9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 43, 44, 45, 46, 47, 61, 62, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 393, 400, 430, 436, 437, 438, 439, 440, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// modifiedAddresses  null
L477:
  reg_var17 = reg_var1;
  goto L44;

// calls     [39, 46]
// called    [305]
// deep-calls     {9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 62, 63, 65, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 324, 325, 326, 328, 329, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 372, 393, 400, 412, 430, 436, 437, 438, 439, 440, 448, 449, 450, 451, 452, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 490, 491, 492, 493, 494, 495, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// deep-called    {0, 4, 6, 9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 43, 44, 45, 46, 47, 61, 62, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 393, 400, 430, 436, 437, 438, 439, 440, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// startStackOffset -128
// modifiedAddresses  [ALL]
L36:
  reg_cx = ferror(reg_var7);
  if(reg_cx != 0) {
    reg_var6 = 1;
    (void) warn("%s", reg_var8);
  }
  (void) fclose(reg_var7);
  goto L40;

// calls     [30, 45]
// called    [311]
// deep-calls     {9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 62, 63, 65, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 324, 325, 326, 328, 329, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 372, 393, 400, 412, 430, 436, 437, 438, 439, 440, 448, 449, 450, 451, 452, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 490, 491, 492, 493, 494, 495, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// deep-called    {0, 4, 6, 9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 43, 44, 45, 46, 47, 61, 62, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 393, 400, 430, 436, 437, 438, 439, 440, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// modifiedAddresses  null
L354:
  if(reg_var22 != 0) {
    reg_var1 = reg_var18;
    reg_var4 = NARROW(reg_var1);
  }
  if(LOAD(reg_var14 + buffer_addr) == 10) goto L477;
  goto L31;

// calls     [338]
// called    [4]
// deep-calls     {54, 63, 67, 336, 337, 338, 340, 341, 384, 424, 460, 461, 462, 463, 464, 502, 503, 504, 505, 506, 507}
// deep-called    {0, 4, 61}
// startStackOffset -128
// modifiedAddresses  [ALL]
L53:
  (void) err(1, "cannot allocate %zu bytes", 0x8000);
  // not reached
  goto L63;

// calls     [326]
// called    [311]
// deep-calls     {49, 63, 65, 324, 325, 326, 328, 329, 372, 412, 448, 449, 450, 451, 452, 490, 491, 492, 493, 494, 495}
// deep-called    {0, 4, 6, 9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 43, 44, 45, 46, 47, 61, 62, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 393, 400, 430, 436, 437, 438, 439, 440, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// startStackOffset -128
// modifiedAddresses  [ALL]
L48:
  (void) err(1, "cannot allocate %zu bytes", reg_var19 * 8);
  // not reached
  goto L63;

// calls     [430]
// called    [6, 11, 35]
// deep-calls     {9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 62, 63, 65, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 324, 325, 326, 328, 329, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 372, 393, 400, 412, 430, 436, 437, 438, 439, 440, 448, 449, 450, 451, 452, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 490, 491, 492, 493, 494, 495, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// deep-called    {0, 4, 6, 9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 43, 44, 45, 46, 47, 61, 62, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 393, 400, 430, 436, 437, 438, 439, 440, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// modifiedAddresses  null
L344:
  while(1) {
    reg_bh = fgetws(buffer_addr, reg_var4, reg_var7);
    if(reg_bh == 0) {
      reg_var21 = 1;
      break;
    }
    reg_bi = buffer_addr;
    reg_bj = wcslen(buffer_addr);
    reg_var13 = UNSIGNED_EXTEND(reg_bj);
    if(reg_var13 != 0) {
      reg_var21 = 0;
      reg_var10 = reg_bi;
      reg_var9 = reg_bj;
      break;
    }
  }
  if(reg_var21 == 0) goto L18;
  goto L36;

// calls     [2, 51, 55]
// called    [0]
// deep-calls     {2, 3, 51, 52, 55, 56, 57, 58, 63, 64, 66, 318, 319, 320, 322, 323, 330, 331, 332, 334, 335, 366, 378, 406, 418, 434, 442, 443, 444, 445, 446, 454, 455, 456, 457, 458, 484, 485, 486, 487, 488, 489, 496, 497, 498, 499, 500, 501}
// deep-called    {0, 61}
// modifiedAddresses  null
L397:
  if(reg_ac == 86) {
    reg_ad = dcgettext("", "%s from %s\n", 5);
    (void) __printf_chk(1, reg_ad, LOAD(g_0x0001fff0), "util-linux 2.30.2", 0, InitValue(initial_value_of_x5), InitValue(initial_value_of_x6));
    (void) exit(0);
    // not reached
  } else if(reg_ac == 104) {
    reg_ec = LOAD(stdout);
    reg_ed = dcgettext("", "Usage: %s [options] [file ...]\n", 5);
    (void) __fprintf_chk(reg_ec, 1, reg_ed, LOAD(g_0x0001fff0), 0, InitValue(initial_value_of_x5), InitValue(initial_value_of_x6), InitValue(initial_value_of_x7));
    (void) fputc(10, reg_ec);
    reg_ee = dcgettext("", "Reverse lines characterwise.\n", 5);
    (void) fputs(reg_ee, reg_ec);
    reg_ef = dcgettext("", "\nOptions:\n", 5);
    (void) fputs(reg_ef, reg_ec);
    reg_eg = dcgettext("", " -h, --help     display this help and exit\n", 5);
    (void) fputs(reg_eg, reg_ec);
    reg_eh = dcgettext("", " -V, --version  output version information and exit\n", 5);
    (void) fputs(reg_eh, reg_ec);
    reg_ei = dcgettext("", "\nFor more details see %s.\n", 5);
    (void) __fprintf_chk(reg_ec, 1, reg_ei, "rev(1)", 0, InitValue(initial_value_of_x5), InitValue(initial_value_of_x6), InitValue(initial_value_of_x7));
    if(reg_ec == LOAD(stderr)) {
      reg_var20 = 1;
      reg_result = 1;
    } else {
      reg_var20 = 0;
      reg_result = 0;
    }
    (void) exit(reg_var20);
  } else {
    reg_ea = LOAD(stderr);
    reg_eb = dcgettext("", "Try '%s --help' for more information.\n", 5);
    (void) __fprintf_chk(reg_ea, 1, reg_eb, LOAD(g_0x0001fff0), 0, InitValue(initial_value_of_x5), InitValue(initial_value_of_x6), InitValue(initial_value_of_x7));
    (void) exit(1);
    // not reached
  }
  goto L63;

// calls     [33, 35]
// called    [30, 44]
// deep-calls     {9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 62, 63, 65, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 324, 325, 326, 328, 329, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 372, 393, 400, 412, 430, 436, 437, 438, 439, 440, 448, 449, 450, 451, 452, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 490, 491, 492, 493, 494, 495, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// deep-called    {0, 4, 6, 9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 43, 44, 45, 46, 47, 61, 62, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 393, 400, 430, 436, 437, 438, 439, 440, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// startStackOffset -128
// modifiedAddresses  []
L31:
  reg_var2 = reg_var13 / 2;
  if(reg_var2 != 0) {
    reg_var16 = buffer_addr;
    reg_var15 = reg_var16 + reg_var13 * 4;
    reg_var2 = reg_var16 + reg_var2 * 4;
    do {
      reg_ct = LOAD(reg_var16);
      (void) STORE(reg_var16, LOAD(reg_var15 + -4));
      reg_var16 += 4;
      (void) STORE(reg_var15 + -4, reg_ct);
      reg_var15 += -4;
    } while(reg_var16 != reg_var2);
  }
  (void) fputws(buffer_addr, LOAD(stdout));
  goto L344;

// calls     [393]
// called    [18]
// deep-calls     {9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 62, 63, 65, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 324, 325, 326, 328, 329, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 372, 393, 400, 412, 430, 436, 437, 438, 439, 440, 448, 449, 450, 451, 452, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 490, 491, 492, 493, 494, 495, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// deep-called    {0, 4, 6, 9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 43, 44, 45, 46, 47, 61, 62, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 393, 400, 430, 436, 437, 438, 439, 440, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// modifiedAddresses  null
L350:
  while(1) {
    reg_cf = buffer_addr;
    reg_cg = feof(reg_var7);
    if(reg_cg != 0) {
      reg_var22 = 0;
      reg_var14 = reg_var11;
      break;
    }
    reg_bp = realloc(reg_cf, NARROW(reg_var1) * 8);
    reg_var17 = reg_var1 * 2;
    if(reg_var1 * 8 != 0 && reg_bp == 0) {
      reg_var22 = 3;
      reg_var19 = reg_var1;
      break;
    }
    (void) STORE(&buffer_addr, reg_bp);
    reg_br = fgetws(reg_bp + reg_var12, reg_var4, reg_var7);
    if(reg_br == 0) {
      reg_var22 = 2;
      reg_var18 = reg_var17;
      break;
    }
    reg_bs = buffer_addr;
    reg_bt = wcslen(buffer_addr);
    reg_var12 = UNSIGNED_EXTEND(reg_bt) * 4;
    reg_var13 = UNSIGNED_EXTEND(reg_bt);
    reg_var11 = reg_var12 + -4;
    if(LOAD(reg_bs + reg_var11) == 10) {
      reg_var22 = 1;
      break;
    }
    reg_var1 = reg_var17;
    reg_var4 = NARROW(reg_var1);
  }
  if(reg_var22 == 1) goto L44;
  if(reg_var22 != 0 && reg_var22 != 2) goto L48;
  goto L354;

// is exit block
// calls     []
// called    [42, 329, 341, 434]
// deep-calls     {}
// deep-called    {0, 2, 3, 4, 6, 9, 11, 14, 16, 18, 19, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 64, 65, 66, 67, 99, 100, 138, 139, 140, 141, 305, 311, 312, 313, 314, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 360, 366, 372, 378, 384, 393, 397, 400, 406, 412, 418, 424, 430, 434, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519}
// modifiedAddresses  null
L63:
  return reg_result;
}

